// Generated by Dagger (https://dagger.dev).
package com.languagexx.simplenotes.di;

import com.languagexx.simplenotes.persistence.NoteDao;
import com.languagexx.simplenotes.persistence.NoteDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidesNoteDaoFactory implements Factory<NoteDao> {
  private final AppModule module;

  private final Provider<NoteDatabase> dbProvider;

  public AppModule_ProvidesNoteDaoFactory(AppModule module, Provider<NoteDatabase> dbProvider) {
    this.module = module;
    this.dbProvider = dbProvider;
  }

  @Override
  public NoteDao get() {
    return providesNoteDao(module, dbProvider.get());
  }

  public static AppModule_ProvidesNoteDaoFactory create(AppModule module,
      Provider<NoteDatabase> dbProvider) {
    return new AppModule_ProvidesNoteDaoFactory(module, dbProvider);
  }

  public static NoteDao providesNoteDao(AppModule instance, NoteDatabase db) {
    return Preconditions.checkNotNull(instance.providesNoteDao(db), "Cannot return null from a non-@Nullable @Provides method");
  }
}
