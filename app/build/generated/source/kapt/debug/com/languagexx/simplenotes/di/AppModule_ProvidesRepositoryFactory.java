// Generated by Dagger (https://dagger.dev).
package com.languagexx.simplenotes.di;

import com.languagexx.simplenotes.persistence.NoteDao;
import com.languagexx.simplenotes.repository.NoteRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidesRepositoryFactory implements Factory<NoteRepository> {
  private final AppModule module;

  private final Provider<NoteDao> noteDaoProvider;

  public AppModule_ProvidesRepositoryFactory(AppModule module, Provider<NoteDao> noteDaoProvider) {
    this.module = module;
    this.noteDaoProvider = noteDaoProvider;
  }

  @Override
  public NoteRepository get() {
    return providesRepository(module, noteDaoProvider.get());
  }

  public static AppModule_ProvidesRepositoryFactory create(AppModule module,
      Provider<NoteDao> noteDaoProvider) {
    return new AppModule_ProvidesRepositoryFactory(module, noteDaoProvider);
  }

  public static NoteRepository providesRepository(AppModule instance, NoteDao noteDao) {
    return Preconditions.checkNotNull(instance.providesRepository(noteDao), "Cannot return null from a non-@Nullable @Provides method");
  }
}
