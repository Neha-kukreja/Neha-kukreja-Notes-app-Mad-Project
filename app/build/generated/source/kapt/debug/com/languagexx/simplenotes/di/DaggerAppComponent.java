// Generated by Dagger (https://dagger.dev).
package com.languagexx.simplenotes.di;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import com.languagexx.simplenotes.BaseApplication;
import com.languagexx.simplenotes.persistence.NoteDao;
import com.languagexx.simplenotes.persistence.NoteDatabase;
import com.languagexx.simplenotes.repository.NoteRepository;
import com.languagexx.simplenotes.ui.AddFragment;
import com.languagexx.simplenotes.ui.AddFragment_MembersInjector;
import com.languagexx.simplenotes.ui.EditFragment;
import com.languagexx.simplenotes.ui.EditFragment_MembersInjector;
import com.languagexx.simplenotes.ui.ListFragment;
import com.languagexx.simplenotes.ui.ListFragment_MembersInjector;
import com.languagexx.simplenotes.ui.MainActivity;
import com.languagexx.simplenotes.ui.NoteViewModel;
import com.languagexx.simplenotes.ui.NoteViewModel_Factory;
import com.languagexx.simplenotes.util.ViewModelProviderFactory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<NoteDatabase> providesAppDatabaseProvider;

  private Provider<NoteDao> providesNoteDaoProvider;

  private Provider<NoteRepository> providesRepositoryProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application applicationParam) {

    initialize(appModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application applicationParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.providesAppDatabaseProvider = DoubleCheck.provider(AppModule_ProvidesAppDatabaseFactory.create(appModuleParam, applicationProvider));
    this.providesNoteDaoProvider = DoubleCheck.provider(AppModule_ProvidesNoteDaoFactory.create(appModuleParam, providesAppDatabaseProvider));
    this.providesRepositoryProvider = AppModule_ProvidesRepositoryFactory.create(appModuleParam, providesNoteDaoProvider);
  }

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);}

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<FragmentBuildersModule_ContributeListFragment.ListFragmentSubcomponent.Factory> listFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeAddFragment.AddFragmentSubcomponent.Factory> addFragmentSubcomponentFactoryProvider;

    private Provider<FragmentBuildersModule_ContributeEditFragment.EditFragmentSubcomponent.Factory> editFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(ListFragment.class, (Provider) listFragmentSubcomponentFactoryProvider).put(AddFragment.class, (Provider) addFragmentSubcomponentFactoryProvider).put(EditFragment.class, (Provider) editFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.listFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeListFragment.ListFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeListFragment.ListFragmentSubcomponent.Factory get(
            ) {
          return new ListFragmentSubcomponentFactory();}
      };
      this.addFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeAddFragment.AddFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeAddFragment.AddFragmentSubcomponent.Factory get() {
          return new AddFragmentSubcomponentFactory();}
      };
      this.editFragmentSubcomponentFactoryProvider = new Provider<FragmentBuildersModule_ContributeEditFragment.EditFragmentSubcomponent.Factory>() {
        @Override
        public FragmentBuildersModule_ContributeEditFragment.EditFragmentSubcomponent.Factory get(
            ) {
          return new EditFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class ListFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeListFragment.ListFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeListFragment.ListFragmentSubcomponent create(
          ListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ListFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeListFragment.ListFragmentSubcomponent {
      private Provider<NoteViewModel> noteViewModelProvider;

      private ListFragmentSubcomponentImpl(ListFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(NoteViewModel.class, (Provider) noteViewModelProvider);}

      private ViewModelProviderFactory getViewModelProviderFactory() {
        return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final ListFragment arg0) {
        this.noteViewModelProvider = NoteViewModel_Factory.create(DaggerAppComponent.this.providesRepositoryProvider);
      }

      @Override
      public void inject(ListFragment arg0) {
        injectListFragment(arg0);}

      private ListFragment injectListFragment(ListFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        ListFragment_MembersInjector.injectViewmodelProviderFactory(instance, getViewModelProviderFactory());
        return instance;
      }
    }

    private final class AddFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeAddFragment.AddFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeAddFragment.AddFragmentSubcomponent create(
          AddFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new AddFragmentSubcomponentImpl(arg0);
      }
    }

    private final class AddFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeAddFragment.AddFragmentSubcomponent {
      private Provider<NoteViewModel> noteViewModelProvider;

      private AddFragmentSubcomponentImpl(AddFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(NoteViewModel.class, (Provider) noteViewModelProvider);}

      private ViewModelProviderFactory getViewModelProviderFactory() {
        return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final AddFragment arg0) {
        this.noteViewModelProvider = NoteViewModel_Factory.create(DaggerAppComponent.this.providesRepositoryProvider);
      }

      @Override
      public void inject(AddFragment arg0) {
        injectAddFragment(arg0);}

      private AddFragment injectAddFragment(AddFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        AddFragment_MembersInjector.injectViewmodelProviderFactory(instance, getViewModelProviderFactory());
        return instance;
      }
    }

    private final class EditFragmentSubcomponentFactory implements FragmentBuildersModule_ContributeEditFragment.EditFragmentSubcomponent.Factory {
      @Override
      public FragmentBuildersModule_ContributeEditFragment.EditFragmentSubcomponent create(
          EditFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new EditFragmentSubcomponentImpl(arg0);
      }
    }

    private final class EditFragmentSubcomponentImpl implements FragmentBuildersModule_ContributeEditFragment.EditFragmentSubcomponent {
      private Provider<NoteViewModel> noteViewModelProvider;

      private EditFragmentSubcomponentImpl(EditFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(NoteViewModel.class, (Provider) noteViewModelProvider);}

      private ViewModelProviderFactory getViewModelProviderFactory() {
        return new ViewModelProviderFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final EditFragment arg0) {
        this.noteViewModelProvider = NoteViewModel_Factory.create(DaggerAppComponent.this.providesRepositoryProvider);
      }

      @Override
      public void inject(EditFragment arg0) {
        injectEditFragment(arg0);}

      private EditFragment injectEditFragment(EditFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        EditFragment_MembersInjector.injectViewmodelProviderFactory(instance, getViewModelProviderFactory());
        return instance;
      }
    }
  }
}
